#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;
struct matStruct {
	int control;
    float posicion[4];
	float velocidad[4];
	int adyacentes[8];
} newMaterial;

layout(binding = 3) buffer SSBO
{
	float DeltaT;
	float constMuelle;
	matStruct myarray[];
};

vec3 calcularMuelle(int idVecina, vec3 posicionParticula, float cteMuelle, float longMax, float longMin);

void main()
{
	float pesoParticula = 1.0;

	// SI SE PONE LA GRAVEDAD REAL CAE DEMASIADO RÁPIDO
	vec3 gravedad = vec3(0, -9.80665, 0);
	//vec3 gravedad = vec3(0, -0.001, 0);


	vec3 fuerza;

	// Ctes muelles (A*E/L, A = sección cilindro, E = módulo de elasticidad, L = longitud del muelle), LAS CTES ESTÁN INVENTADAS
	float cteMuelleHorizontal = 10;
	float cteMuelleVertical = 10;
	float cteMuelleDiagonal = 10;
	float cteMuelleBending = 5;


	// Gravedad
	fuerza = gravedad * pesoParticula;

	//ID WORKGROUP ES uvec3 gl_WorkGroupID 
	// Calculo del id de la particula dependiendo del workgroup (SE DEBE CAMBIAR PARA CÁLCULO SI SE CAMBIA EL TAMAÑO DE TELA)
	uint idParticula = 10 * gl_WorkGroupID.y + gl_WorkGroupID.x;
	matStruct particula = myarray[idParticula];
	// Cambiar a vec3 para facilitar cálculos
	vec3 posicionParticula = vec3(particula.posicion[0],particula.posicion[1],particula.posicion[2]);

	// Vecina 1 HORIZONTAL
	int idVecina = particula.adyacentes[1];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleHorizontal,1,0.9);
	}
	// Vecina 6 HORIZONTAL
	idVecina = particula.adyacentes[6];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleHorizontal,1,0.9);
	}
	// Vecina 3 VERTICAL 
	idVecina = particula.adyacentes[3];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleVertical,1,0.9);
	}
	// Vecina 4 VERTICAL 
	idVecina = particula.adyacentes[4];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleVertical,1,0.9);
	}
	// Vecina 0 DIAGONAL 
	idVecina = particula.adyacentes[0];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleDiagonal,1.41421356,1.3);
	}
	// Vecina 2 DIAGONAL 
	idVecina = particula.adyacentes[2];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleDiagonal,1.41421356,1.3);
	}
	// Vecina 5 DIAGONAL 
	idVecina = particula.adyacentes[5];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleDiagonal,1.41421356,1.3);
	}
	// Vecina 7 DIAGONAL 
	idVecina = particula.adyacentes[7];
	if(idVecina!=-1){
		fuerza += calcularMuelle(idVecina,posicionParticula,cteMuelleDiagonal,1.41421356,1.3);
	}

	// Intento cálculo Bending
	// Vecina 1 HORIZONTAL
	idVecina = particula.adyacentes[1];
	int idBending;
	if(idVecina!=-1){
		idBending = myarray[idVecina].adyacentes[1]; 
		if(idBending!=-1){
			fuerza += calcularMuelle(idBending,posicionParticula,cteMuelleBending,2.0,1.8);
		}
	}
	// Vecina 6 HORIZONTAL
	idVecina = particula.adyacentes[6];
	if(idVecina!=-1){
		idBending = myarray[idVecina].adyacentes[6]; 
		if(idBending!=-1){
			fuerza += calcularMuelle(idBending,posicionParticula,cteMuelleBending,2.0,1.8);
		}
	}
	// Vecina 3 VERTICAL 
	idVecina = particula.adyacentes[3];
	if(idVecina!=-1){
		idBending = myarray[idVecina].adyacentes[3]; 
		if(idBending!=-1){
			fuerza += calcularMuelle(idBending,posicionParticula,cteMuelleBending,2.0,1.8);
		}
	}
	// Vecina 4 VERTICAL 
	idVecina = particula.adyacentes[4];
	if(idVecina!=-1){
		idBending = myarray[idVecina].adyacentes[4]; 
		if(idBending!=-1){
			fuerza += calcularMuelle(idBending,posicionParticula,cteMuelleBending,2.0,1.8);
		}
	}

	// Cambiar posición
	// SE DEBE SABER EL DELTAT ENTRE CÁLCULOS, AHORA ESTÁ INVENTADO
	//float DeltaT = 1.0;
	vec3 aceleracion =  fuerza / pesoParticula;


	// Donde uso particula.aceleracion[0] deberia ser myarray[1].velocidad[0] (SE TIENE QUE CAMBIAR NOMBRE)
	float nuevaPosicionX = particula.posicion[0] + particula.velocidad[0] * DeltaT + 0.5 * aceleracion[0] * DeltaT * DeltaT;
	float nuevaPosicionY = particula.posicion[1] + particula.velocidad[1] * DeltaT + 0.5 * aceleracion[1] * DeltaT * DeltaT;
	float nuevaPosicionZ = particula.posicion[2] + particula.velocidad[2] * DeltaT + 0.5 * aceleracion[2] * DeltaT * DeltaT;


	// FAKEAR OBJETO COLISION
	float planoColision[4] = {1.9,-5.0,5.0,-1.0};
	vec3 centroEsfera = vec3(5,-5,5);
	float radioEsfera = 2.0f;

	/*
	if(nuevaPosicionX >= 1.9 && nuevaPosicionX <= 5.0 && nuevaPosicionY > -5.0){
		particula.posicion[0] = nuevaPosicionX;
		particula.posicion[1] = nuevaPosicionY;
		//particula.posicion[2] = nuevaPosicionZ;
		particula.velocidad[0] = aceleracion.x * DeltaT;
		particula.velocidad[1] = aceleracion.y * DeltaT;
		particula.velocidad[2] = aceleracion.z * DeltaT;
	}else{
		particula.velocidad[0] = 0;
		particula.velocidad[1] = 0;
		particula.velocidad[2] = 0;
	}
	*/


	posicionParticula = vec3(particula.posicion[0],particula.posicion[1],particula.posicion[2]);
	vec3 nuevaPosicionParticula = vec3(nuevaPosicionX,nuevaPosicionY,nuevaPosicionZ);

	
	if(length(centroEsfera-nuevaPosicionParticula)<=radioEsfera){

		vec3 vectorEsfera = centroEsfera-nuevaPosicionParticula;

		float angulo = acos(dot(normalize(vectorEsfera), normalize(fuerza)));

		vec3 fuerzaNormal =  -cos(angulo)*fuerza;

		float coeficienteRozamiento = 2;

		vec3 fuerzaRozamiento =  -sin(angulo)*fuerza/coeficienteRozamiento;

		fuerza += fuerzaNormal;
		fuerza += fuerzaRozamiento;
		// Cambiar posición
		// SE DEBE SABER EL DELTAT ENTRE CÁLCULOS, AHORA ESTÁ INVENTADO
		//float DeltaT = 1.0;
		aceleracion =  fuerza / pesoParticula;


		// Donde uso particula.aceleracion[0] deberia ser myarray[1].velocidad[0] (SE TIENE QUE CAMBIAR NOMBRE)
		nuevaPosicionX = particula.posicion[0] + particula.velocidad[0] * DeltaT + 0.5 * aceleracion[0] * DeltaT * DeltaT;
		nuevaPosicionY = particula.posicion[1] + particula.velocidad[1] * DeltaT + 0.5 * aceleracion[1] * DeltaT * DeltaT;
		nuevaPosicionZ = particula.posicion[2] + particula.velocidad[2] * DeltaT + 0.5 * aceleracion[2] * DeltaT * DeltaT;

	}else{

		particula.velocidad[0] = aceleracion.x * DeltaT;
		particula.velocidad[1] = aceleracion.y * DeltaT;
		particula.velocidad[2] = aceleracion.z * DeltaT;
	}

	particula.posicion[0] = nuevaPosicionX;
	particula.posicion[1] = nuevaPosicionY;
	particula.posicion[2] = nuevaPosicionZ;
	particula.velocidad[0] = aceleracion.x * DeltaT;
	particula.velocidad[1] = aceleracion.y * DeltaT;
	particula.velocidad[2] = aceleracion.z * DeltaT;

	// RESTRICCIONES DE LONGITUD

	//Calcular longitud entre las particulas vecinas y si excede de x dejarlo en el máximo?????


	myarray[idParticula] = particula;

}

// Función que calcula la fuerza de un muelle
vec3 calcularMuelle(int idVecina, vec3 posicionParticula, float cteMuelle, float longMax, float longMin){
	
	vec3 posicionVecina = vec3(myarray[idVecina].posicion[0],myarray[idVecina].posicion[1],myarray[idVecina].posicion[2]);

	vec3 longitud = posicionParticula - posicionVecina;

	float proporcion;
	float posicionx;
	float posiciony;

	// RESTRICCIONES DE LONGITUD
	if(length(longitud) > longMax){
		longitud *= (longMax/length(longitud));

	}else if(length(longitud) < longMin){
		longitud *= -(longMin/length(longitud));
	}

	return -cteMuelle * longitud;
}

